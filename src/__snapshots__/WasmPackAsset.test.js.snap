// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WasmPackAsset generateInitializer augments the module generated by wasm-pack 1`] = `
"import { TextDecoder, TextEncoder } from 'util';
import { load } from './wasm-loader.js';
let wasm;

/**
* @returns {void}
*/
export function run() {
    return wasm.run();
}

let cachedTextDecoder = new TextDecoder('utf-8');

let cachegetUint8Memory = null;
function getUint8Memory() {
    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory;
}

function getStringFromWasm(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));
}

const heap = new Array(32);

heap.fill(undefined);

heap.push(undefined, null, true, false);

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    if (typeof(heap_next) !== 'number') throw new Error('corrupt heap');

    heap[idx] = obj;
    return idx;
}

function getObject(idx) { return heap[idx]; }

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let WASM_VECTOR_LEN = 0;

let cachedTextEncoder = new TextEncoder('utf-8');

let passStringToWasm;
if (typeof cachedTextEncoder.encodeInto === 'function') {
    passStringToWasm = function(arg) {


        if (typeof(arg) !== 'string') throw new Error('expected a string argument');

        let size = arg.length;
        let ptr = wasm.__wbindgen_malloc(size);
        let offset = 0;
        {
            const mem = getUint8Memory();
            for (; offset < arg.length; offset++) {
                const code = arg.charCodeAt(offset);
                if (code > 0x7F) break;
                mem[ptr + offset] = code;
            }
        }

        if (offset !== arg.length) {
            arg = arg.slice(offset);
            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);
            const view = getUint8Memory().subarray(ptr + offset, ptr + size);
            const ret = cachedTextEncoder.encodeInto(arg, view);
            if (ret.read != arg.length) throw new Error('failed to pass whole string');
            offset += ret.written;
        }
        WASM_VECTOR_LEN = offset;
        return ptr;
    };
} else {
    passStringToWasm = function(arg) {


        if (typeof(arg) !== 'string') throw new Error('expected a string argument');

        let size = arg.length;
        let ptr = wasm.__wbindgen_malloc(size);
        let offset = 0;
        {
            const mem = getUint8Memory();
            for (; offset < arg.length; offset++) {
                const code = arg.charCodeAt(offset);
                if (code > 0x7F) break;
                mem[ptr + offset] = code;
            }
        }

        if (offset !== arg.length) {
            const buf = cachedTextEncoder.encode(arg.slice(offset));
            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);
            getUint8Memory().set(buf, ptr + offset);
            offset += buf.length;
        }
        WASM_VECTOR_LEN = offset;
        return ptr;
    };
}

let cachegetUint32Memory = null;
function getUint32Memory() {
    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {
        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);
    }
    return cachegetUint32Memory;
}

export const __wbindgen_string_new = function(arg0, arg1) {
    let varg0 = getStringFromWasm(arg0, arg1);
    try {
        return addHeapObject(varg0);
    } catch (e) {
        let error = (function () {
            try {
                return e instanceof Error ? \`\${e.message}\\\\n\\\\nStack:\\\\n\${e.stack}\` : e.toString();
            } catch(_) {
                return \\"<failed to stringify thrown value>\\";
            }
        }());
        console.error(\\"wasm-bindgen: imported JS function that was not marked as \`catch\` threw an error:\\", error);
        throw e;
    }
};

export const __wbindgen_object_drop_ref = function(arg0) {
    try {
        takeObject(arg0);
    } catch (e) {
        let error = (function () {
            try {
                return e instanceof Error ? \`\${e.message}\\\\n\\\\nStack:\\\\n\${e.stack}\` : e.toString();
            } catch(_) {
                return \\"<failed to stringify thrown value>\\";
            }
        }());
        console.error(\\"wasm-bindgen: imported JS function that was not marked as \`catch\` threw an error:\\", error);
        throw e;
    }
};

export const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {
    let varg0 = getStringFromWasm(arg0, arg1);

    varg0 = varg0.slice();
    wasm.__wbindgen_free(arg0, arg1 * 1);

    try {
        console.error(varg0);
    } catch (e) {
        let error = (function () {
            try {
                return e instanceof Error ? \`\${e.message}\\\\n\\\\nStack:\\\\n\${e.stack}\` : e.toString();
            } catch(_) {
                return \\"<failed to stringify thrown value>\\";
            }
        }());
        console.error(\\"wasm-bindgen: imported JS function that was not marked as \`catch\` threw an error:\\", error);
        throw e;
    }
};

export const __wbg_new_59cb74e423758ede = function() {
    try {
        return addHeapObject(new Error());
    } catch (e) {
        let error = (function () {
            try {
                return e instanceof Error ? \`\${e.message}\\\\n\\\\nStack:\\\\n\${e.stack}\` : e.toString();
            } catch(_) {
                return \\"<failed to stringify thrown value>\\";
            }
        }());
        console.error(\\"wasm-bindgen: imported JS function that was not marked as \`catch\` threw an error:\\", error);
        throw e;
    }
};

export const __wbg_stack_558ba5917b466edd = function(ret, arg0) {
    try {

        const retptr = passStringToWasm(getObject(arg0).stack);
        const retlen = WASM_VECTOR_LEN;
        const mem = getUint32Memory();
        mem[ret / 4] = retptr;
        mem[ret / 4 + 1] = retlen;

    } catch (e) {
        let error = (function () {
            try {
                return e instanceof Error ? \`\${e.message}\\\\n\\\\nStack:\\\\n\${e.stack}\` : e.toString();
            } catch(_) {
                return \\"<failed to stringify thrown value>\\";
            }
        }());
        console.error(\\"wasm-bindgen: imported JS function that was not marked as \`catch\` threw an error:\\", error);
        throw e;
    }
};

export const __widl_f_log_1_ = function(arg0) {
    try {
        console.log(getObject(arg0));
    } catch (e) {
        let error = (function () {
            try {
                return e instanceof Error ? \`\${e.message}\\\\n\\\\nStack:\\\\n\${e.stack}\` : e.toString();
            } catch(_) {
                return \\"<failed to stringify thrown value>\\";
            }
        }());
        console.error(\\"wasm-bindgen: imported JS function that was not marked as \`catch\` threw an error:\\", error);
        throw e;
    }
};

export const __wbindgen_throw = function(arg0, arg1) {
    let varg0 = getStringFromWasm(arg0, arg1);
    try {
        throw new Error(varg0);
    } catch (e) {
        let error = (function () {
            try {
                return e instanceof Error ? \`\${e.message}\\\\n\\\\nStack:\\\\n\${e.stack}\` : e.toString();
            } catch(_) {
                return \\"<failed to stringify thrown value>\\";
            }
        }());
        console.error(\\"wasm-bindgen: imported JS function that was not marked as \`catch\` threw an error:\\", error);
        throw e;
    }
};


export default function init(wasmUrl) {
  return load(wasmUrl, {
    ['./output.js']: {
      __wbindgen_string_new,
      __wbindgen_object_drop_ref,
      __wbg_error_4bb6c2a97407129a,
      __wbg_new_59cb74e423758ede,
      __wbg_stack_558ba5917b466edd,
      __widl_f_log_1_,
      __wbindgen_throw
    }
  }).then(wasmExports => {
    wasm = wasmExports;
    return {
      run
    }
  });
}
"
`;
